buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
        dependencyManagementVersion = '0.6.0.RELEASE'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${dependencyManagementVersion}")
        classpath("se.transmode.gradle:gradle-docker:1.2")
    }
}

ext {
    spockVersion = '1.0-groovy-2.4'
    groovyVersion = '2.4.4' // this version is compatible with spockVersion.
}

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'project-report'
apply plugin: 'spring-boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
apply plugin: 'docker'

dependencyManagement {
    imports {
        mavenBom 'org.springframework.cloud:spring-cloud-netflix:1.1.5.RELEASE'
    }
}

group = 'com.apps.servicediscovery'
version = '1.0.0-SNAPSHOT'

compileJava {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

dependencies {
    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
    compile 'org.springframework.cloud:spring-cloud-starter-eureka-server'

    testCompile("org.spockframework:spock-core:$spockVersion") {
        exclude group: 'org.codehaus.groovy'
    }
    testCompile("org.codehaus.groovy:groovy-all:$groovyVersion")
    testCompile('org.hamcrest:hamcrest-core:1.3') // only necessary if Hamcrest matchers are used
    testCompile('cglib:cglib-nodep:3.1') // used for spock framework to mock non-interface classes.
    testCompile('org.objenesis:objenesis:2.1') // used when mocked class has non-default constructor

    testCompile("org.springframework.boot:spring-boot-starter-test:1.4.0.RELEASE")
}

docker {
    baseImage = 'anapsix/alpine-java:8'
    maintainer = 'thanhtam.nguyen@pycogroup.com'
}

task buildDocker(type: Docker, dependsOn: [tasks.build, tasks.bootRepackage]) {
    def buildDir = project.buildDir.toPath()
    addFile(buildDir.resolve('libs').toFile(), '/opt')
    entryPoint(['java', '-jar', "/opt/${project.name}-${project.version}.jar"])
    applicationName = project.name
}

// add comment
task wrapper(type: Wrapper) {
    description = "Generates gradlew[.bat] scripts"
    gradleVersion = '3.0'

    doLast() {
        def gradleOpts = "-XX:MaxMetaspaceSize=1024m -Xmx1024m"
        def gradleBatOpts = "$gradleOpts -XX:MaxHeapSize=256m"
        File wrapperFile = file("gradlew")
        wrapperFile.text = wrapperFile.text.replace("DEFAULT_JVM_OPTS=",
                "GRADLE_OPTS=\"$gradleOpts \$GRADLE_OPTS\"\nDEFAULT_JVM_OPTS=")
        File wrapperBatFile = file("gradlew.bat")
        wrapperBatFile.text = wrapperBatFile.text.replace("set DEFAULT_JVM_OPTS=",
                "set GRADLE_OPTS=$gradleBatOpts %GRADLE_OPTS%\nset DEFAULT_JVM_OPTS=")
    }
}

